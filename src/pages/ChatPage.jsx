import React, { useEffect, useState } from "react";
import {
  embedArticles,
  fetchArticles,
  insertEmbeddings,
  searchRelevantArticles,
} from "../api";

const ChatPage = () => {
  const [articles, setArticles] = useState([]);
  const [embeddings, setEmbeddings] = useState([]);
  const [query, setQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [finalAnswer, setFinalAnswer] = useState("");
  const [loading, setLoading] = useState(false);

  // Fetch articles when the component mounts
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const articlesData = await fetchArticles(); // Fetch articles from the back-end

        setArticles(articlesData);
        const embeddingsData = await embedArticles(articlesData); // Embed articles

        setEmbeddings(embeddingsData);
        await insertEmbeddings(articlesData, embeddingsData); // Insert embeddings into Qdrant
        setLoading(false);
      } catch (error) {
        setLoading(false);
        console.error("Error during API calls:", error);
      }
    };
    fetchData();
  }, []);

  // Handle search query and fetch relevant articles
  const handleSearch = async () => {
    try {
      setLoading(true);
      const { search_results, final_answer } = await searchRelevantArticles(
        query
      );

      // Update state with search results and final answer
      setSearchResults(search_results);
      setFinalAnswer(final_answer); // Store the final answer generated by Gemini

      setLoading(false);
    } catch (error) {
      setLoading(false);
      console.error("Error during search:", error);
    }
  };

  // Parse the search result string to get title and content
  const parseArticle = (article) => {
    const [titlePart, contentPart] = article.split("\nContent:");
    const title = titlePart.replace("Title: ", "");
    const content = contentPart.trim();

    return { title, content };
  };

  // Function to format the final answer
  const formatFinalAnswer = (answer) => {
    // Split the answer into individual points by detecting bullet points
    const points = answer
      .split("*")
      .filter((point) => point.trim() !== "")
      .map((point) => point.trim());
    return points;
  };

  return (
    <div className="bg-gray-100 p-8">
      <div className="max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg">
        <h2 className="text-2xl font-semibold text-center mb-4">AI Chatbot</h2>
        <div className="mb-4">
          <input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Ask a question about AI"
            className="w-full p-2 border rounded-lg"
          />
        </div>
        <button
          onClick={handleSearch}
          className="w-full bg-indigo-600 text-white p-2 rounded-lg hover:bg-indigo-700 transition duration-300"
        >
          Search
        </button>
        {loading && (
          <p className="text-center text-gray-500 mt-4">Loading...</p>
        )}
        {/* Display Search Results (Relevant Articles) */}
        {searchResults.length > 0 && (
          <div className="mt-6">
            <h3 className="font-semibold text-xl mb-3">Relevant Articles:</h3>
            <ul>
              {searchResults.map((result, index) => {
                const { title, content } = parseArticle(result); // Parse title and content from the string
                return (
                  <li key={index} className="mb-4 p-4 border-b">
                    <h4 className="font-semibold text-lg">{title}</h4>
                    <p className="text-gray-700">{content}</p>
                  </li>
                );
              })}
            </ul>
          </div>
        )}

        {/* Display the Final Answer (Generated by Gemini) */}
        {finalAnswer && (
          <div className="mt-6">
            <h3 className="font-semibold text-xl mb-3">Final Answer:</h3>
            <p className="text-gray-900 mb-4 font-semibold">
              {finalAnswer.split("*")[0].trim()}{" "}
              {/* Display the first line outside the list */}
            </p>
            <ul className="list-disc pl-6">
              {formatFinalAnswer(finalAnswer)
                .slice(1)
                .map((point, index) => (
                  <li key={index} className="text-gray-700 mb-2">
                    {point}
                  </li>
                ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatPage;
